import React, { useState } from 'react';
import { File, Folder, ChevronDown, ChevronRight } from 'lucide-react';
import Card from './ui/Card'; // Assuming Card is in the ui subfolder

const FileTree = ({ title, files, onFileSelect }) => {
Â  const [expandedFolders, setExpandedFolders] = useState({});

Â  const toggleFolder = (folderPath) => {
Â  Â  setExpandedFolders(prev => ({ ...prev, [folderPath]: !prev[folderPath] }));
Â  };

Â  const renderTree = (tree, path = '') => {
Â  Â  // Guard against null or undefined tree data
Â  Â  if (!tree) return null;

Â  Â  return Object.entries(tree).map(([name, content]) => {
Â  Â  Â  const currentPath = path ? `${path}/${name}` : name;
      
      // ðŸ”¹ THE FIX: A more robust check for what a "folder" is.
      // This now correctly handles cases where content might be null.
Â  Â  Â  const isFolder = content && typeof content === 'object';

Â  Â  Â  if (isFolder) {
Â  Â  Â  Â  const isExpanded = expandedFolders[currentPath];
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <div key={currentPath}>
Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  className="flex items-center cursor-pointer p-1 rounded hover:bg-gray-700"
Â  Â  Â  Â  Â  Â  Â  onClick={() => toggleFolder(currentPath)}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {isExpanded ? <ChevronDown className="w-4 h-4 mr-2" /> : <ChevronRight className="w-4 h-4 mr-2" />}
Â  Â  Â  Â  Â  Â  Â  <Folder className="w-4 h-4 mr-2 text-yellow-400" />
Â  Â  Â  Â  Â  Â  Â  <span>{name}</span>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  {isExpanded && <div className="pl-6 border-l border-gray-600 ml-2">{renderTree(content, currentPath)}</div>}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  Â  } else {
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  key={currentPath}
Â  Â  Â  Â  Â  Â  className="flex items-center cursor-pointer p-1 rounded hover:bg-gray-700"
Â  Â  Â  Â  Â  Â  onClick={() => onFileSelect({ path: currentPath, content: content || '' })} // Ensure content is not null
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <File className="w-4 h-4 mr-2 text-blue-400 ml-2" />
Â  Â  Â  Â  Â  Â  <span>{name}</span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  Â  }
Â  Â  });
Â  };

Â  const buildTree = (fileMap) => {
Â  Â  const tree = {};
Â  Â  if (!fileMap) return tree;

Â  Â  Object.keys(fileMap).forEach(path => {
Â  Â  Â  let currentLevel = tree;
Â  Â  Â  const parts = path.split('/');
Â  Â  Â  parts.forEach((part, index) => {
Â  Â  Â  Â  if (!part) return; // Skip empty parts from leading/trailing slashes
Â  Â  Â  Â  if (index === parts.length - 1) {
Â  Â  Â  Â  Â  currentLevel[part] = fileMap[path];
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  currentLevel[part] = currentLevel[part] || {};
Â  Â  Â  Â  Â  currentLevel = currentLevel[part];
Â  Â  Â  Â  }
Â  Â  Â  });
Â  Â  });
Â  Â  return tree;
Â  };
Â  
Â  const fileTree = buildTree(files);

Â  return (
Â  Â  <Card className="p-4">
Â  Â  Â  <h3 className="text-lg font-semibold mb-2 text-gray-200">{title}</h3>
Â  Â  Â  <div className="text-sm font-mono text-gray-300">{renderTree(fileTree)}</div>
Â  Â  </Card>
Â  );
};

export default FileTree;